name: 'develop - orders - Build Image, Publish & Update Application Helm Chart Values'

on:
    pull_request:
      branches:
        - develop
      types: [opened, synchronize]
      paths-ignore:
        - 'README.md'
    workflow_dispatch:
      branches:
        - develop

env:
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "us-east-1"
  ENVIRONMENT: develop
  REPOSITORY_NAME: "ecommerce-orders"
  APP: "orders"
  CONFIG_REPO: "demo-argocd-datree-config"
  CONFIG_REPO_URI: "https://github.com/luisllm/demo-argocd-datree-config.git"

jobs:
  build_and_publish_image:
    name: Build Image & Update Helm Chart Values
    runs-on: ubuntu-latest
    #environment: $ENVIRONMENT
    defaults:
      run:
        working-directory: apps-code/microservice-orders
    #env:
    #  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      # Install Node.js dependencies
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Setup node"
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: "npm install"
        run: npm install
      
      # Install yq
      - name: Install yq 
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.12.0/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
          yq --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check if ECR repository exists
        id: check_repo
        run: |
          aws ecr describe-repositories --repository-names $REPOSITORY_NAME || exit 0
          echo "::set-output name=repo_exists::true"

      - name: Create ECR repository if it doesn't exist
        if: steps.check_repo.outputs.repo_exists != 'true'
        run: aws ecr create-repository --repository-name $REPOSITORY_NAME

      - name: Build image, test and push to AWS ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo Build started on `date`
          echo Run node.js tests...
          npm run test
          IMAGE_TAG="$(node -e "console.log(require('./package.json').version);")"
          echo Building the Docker image...
          docker build -t $REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG . 
          echo Pushing the Docker image to AWS ECR...
          docker push $REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG

      - name: Clone CONFIG repo to local and update image tag in values file
        id: clone-and-update
        run: | 
          IMAGE_TAG="$(node -e "console.log(require('./package.json').version);")"
          echo New container image tag: $IMAGE_TAG
          echo Create temporary folder to clone the repo into...
          TEMP_FOLDER="$(mktemp -d)" 
          echo Clone the repository...
          git clone -b main $CONFIG_REPO_URI $TEMP_FOLDER 
          cd $TEMP_FOLDER/application-charts/$APP
          ls
          echo Update Helm chart values-dev with new image tag
          IMAGE_TAG=$IMAGE_TAG APP=$APP yq e -i '.[$APP].deployment.imageTag = env(IMAGE_TAG)' ./values-dev.yaml
          cat values-dev.yaml
          echo "Container image tag updated in $APP/values-dev.yaml"
          echo "::set-output name=temp-folder::$TEMP_FOLDER"  # Set TEMP_FOLDER as an output

      - name: Install Helm-Datree
        run: |
          helm plugin install https://github.com/datreeio/helm-datree
          helm plugin update datree
          helm datree version
          helm datree config set offline local

      - name: Run Datree Tests
        continue-on-error: true
        run: |
          TEMP_FOLDER="${{ steps.clone-and-update.outputs.temp-folder }}"  # Get TEMP_FOLDER from the previous step
          cd $TEMP_FOLDER/application-charts/$APP
          helm dependency update .
          helm datree test . -- --values ./values-dev.yaml

      - name: Git commit and push new image tag into values files in CONFIG repo
        run: |
          TEMP_FOLDER="${{ steps.clone-and-update.outputs.temp-folder }}"  # Get TEMP_FOLDER from the previous step
          cd $TEMP_FOLDER/application-charts/$APP
          pwd
          cd ../../
          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.email "luis.longo.m@gmail.com"
            git config user.name "luisllm"
            git add .
            git commit -m "refactor - updated Helm chart values for dev environment with container image - $IMAGE_TAG" 
            git remote remove origin
            git remote add origin https://${{ secrets.TOKEN_GITHUB }}@github.com/luisllm/$CONFIG_REPO.git
            git push --set-upstream origin main
            echo "Changes pushed to CONFIG repo"
          else
            echo "No changes to commit"
          fi
        